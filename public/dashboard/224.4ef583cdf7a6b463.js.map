{"version":3,"file":"224.4ef583cdf7a6b463.js","mappings":"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","names":["i0","TaxonomyComponent","constructor","http","route","router","config","dialog","this","label","value","onSpinner","spinner","ngOnInit","taxonomies","paramMap","subscribe","taxonomy","_a","get","Object","keys","includes","visibility","showUi","buildSetting","navigateByUrl","then","onSubmit","$event","formGroup","invalid","data","_b","getRawValue","post","TAXONOMY_STORE","context","HttpContext","set","SPINNER","response","source","refresh","reset","_c","controls","setValue","_e","_d","parent","delete","deleteTaxonomy","id","name","setting","settings","buildSettings","ServerDataSource","endPoint","TAXONOMIES","dataKey","totalKey","pagerPageKey","pagerLimitKey","filterFieldKey","elements","labels","nameField","push","required","type","description","nameFieldDescription","slugField","validators","key","slugFieldDescription","parentField","hierarchical","options","parentFieldDescription","getAll","forEach","undefined","level","repeat","descField","descFieldDescription","length","buildFormGroup","FormGroup","addControl","FormControl","metas","taxonomyMeta","metaControls","item","isUpdated","control","taxonomySetting","metaGroup","meta","selectMode","actions","position","add","edit","columnTitle","pager","perPage","mode","rowClassFunction","columns","title","IColumnType","filter","renderComponent","TaxonomyActionsComponent","onComponentInitFunction","component","onClick","action","convertDialog","isSortable","slug","count","batch","getSelectedItems","map","batchMode","message","window","confirm","TAXONOMY_DELETE","sets","open","ConvertDialogComponent","onClose","selectedTaxonomy","convert","toTaxonomy","TAXONOMY_CONVERT","core","selectors","ctx","EditTaxonomyComponent","location","parseInt","back","TAXONOMY_SHOW","params","error","termTaxonomy","records","TAXONOMY_UPDATE","EventEmitter","rowData","actionClick","next","dialogRef","taxonomySettings","taxonomySettingsKey","close","routes","path","TaxonomyModule","CommonModule","RouterModule","Angular2SmartTableModule","ThemeModule","ControlModule"],"sourceRoot":"webpack:///","sources":["./dashboard/app/pages/taxonomy/taxonomy.component.html","./dashboard/app/pages/taxonomy/taxonomy.component.ts","./dashboard/app/pages/taxonomy/taxonomy.module.ts"],"sourcesContent":["<div class=\"row\">\n  <div class=\"col-12 col-md-4\" *ngIf=\"controls.length > 0\">\n    <nb-card>\n      <nb-card-header>\n        {{formGroup!.controls['id'].value < 1 ? taxonomySetting!.labels.addNewItem : taxonomySetting!.labels.editItem}}\n      </nb-card-header>\n      <nb-card-body>\n        <form (ngSubmit)=\"onSubmit($event)\" [formGroup]=\"formGroup!\">\n          <control-container [controls]=\"controls\" [form]=\"formGroup!\"></control-container>\n          <control-container [controls]=\"metaControls\" [form]=\"metaGroup!\"></control-container>\n          <div class=\"my-3  d-flex justify-content-between\">\n            <label class=\"label col-form-label\"></label>\n            <button\n              type=\"submit\"\n              status=\"primary\"\n              size=\"small\"\n              [disabled]=\"formGroup!.invalid || spinner\"\n              [nbSpinner]=\"spinner\"\n              nbButton>\n              {{formGroup!.controls['id'].value < 1 ? taxonomySetting!.labels.addNewItem : '更新'}}\n            </button>\n          </div>\n        </form>\n      </nb-card-body>\n    </nb-card>\n  </div>\n  <div class=\"col-12 col-md-8\">\n    <nb-card>\n      <nb-card-body class=\"border-0\">\n        <form (ngSubmit)=\"batch()\" class=\"row mb-2\">\n          <nb-select name=\"batchMode\" [(ngModel)]=\"batchMode\">\n            <nb-option [value]=\"option.value\" *ngFor=\"let option of batches\">{{option.label}}</nb-option>\n          </nb-select>\n          <div class=\"col\">\n            <button nbButton status=\"primary\" [disabled]=\"!batchMode\" type=\"submit\">应用</button>\n          </div>\n        </form>\n        <angular2-smart-table\n          [settings]=\"settings\"\n          [source]=\"source\">\n        </angular2-smart-table>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n","import {Component, EventEmitter, Input, OnInit} from '@angular/core';\nimport {TaxonomySetting, TermTaxonomy} from \"../../@core/definition/content/type\";\nimport {HttpClient, HttpContext} from \"@angular/common/http\";\nimport {\n  TAXONOMIES, TAXONOMY_CONVERT,\n  TAXONOMY_DELETE, TAXONOMY_SHOW,\n  TAXONOMY_STORE,\n  TAXONOMY_UPDATE\n} from \"../../@core/definition/content/api\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {ConfigurationService} from \"../../@core/services/configuration.service\";\nimport {buildFormGroup, Control, ControlOption} from \"../../shared/control/type\";\nimport {OnSpinner, Records} from \"../../@core/definition/common\";\nimport {IColumnType, ServerDataSource} from \"angular2-smart-table\";\nimport {Settings} from \"angular2-smart-table/lib/lib/settings\";\nimport {FormControl, FormGroup} from \"@angular/forms\";\nimport {SPINNER} from \"../../@core/interceptor/authorization\";\nimport {LocationStrategy} from \"@angular/common\";\nimport {NbDialogRef, NbDialogService} from '@nebular/theme';\n\n@Component({\n  selector: 'app-taxonomy',\n  templateUrl: './taxonomy.component.html',\n})\nexport class TaxonomyComponent implements OnInit, OnSpinner {\n  private taxonomy: string = \"\";\n  settings = {};\n  source: ServerDataSource | undefined;\n  formGroup: FormGroup | undefined;\n  spinner: boolean = false;\n  controls: Control[] = [];\n  metaControls: Control[] = [];\n  taxonomySetting: TaxonomySetting | undefined;\n  batches = [\n    {'label': '批量操作', 'value': ''},\n    {'label': '删除', 'value': 'delete'},\n  ];\n  batchMode: string = '';\n\n  constructor(\n    private http: HttpClient,\n    private route: ActivatedRoute,\n    private router: Router,\n    private config: ConfigurationService,\n    private dialog: NbDialogService\n  ) {\n\n  }\n\n  onSpinner(spinner: boolean): void {\n    this.spinner = spinner;\n  }\n\n  ngOnInit() {\n    let taxonomies = this.config.taxonomies();\n    this.route.paramMap.subscribe(paramMap => {\n      let taxonomy = paramMap.get('taxonomy') ?? '';\n      if (!taxonomy || !Object.keys(taxonomies).includes(taxonomy)) {\n        this.router.navigateByUrl(\"/404\").then();\n        return ;\n      }\n      if (!taxonomies[taxonomy].visibility.showUi) {\n        return ;\n      }\n      this.taxonomy = taxonomy;\n      this.buildSetting(taxonomies[taxonomy]);\n    });\n  }\n\n\n  onSubmit($event: any) {\n    if (this.formGroup?.invalid) {\n      return ;\n    }\n    const data = this.formGroup?.getRawValue();\n    this.http.post<TermTaxonomy>(TAXONOMY_STORE.replace('{taxonomy}', this.taxonomy), data, {context:new HttpContext().set(SPINNER, this)}).subscribe(response => {\n      this.source?.refresh();\n      this.formGroup?.reset();\n      this.formGroup?.controls['taxonomy'].setValue(this.taxonomy);\n      this.formGroup?.controls['parent']?.setValue('');\n    });\n  }\n\n  private delete(taxonomy: TermTaxonomy) {\n    this.deleteTaxonomy([taxonomy.id!], \"确认删除类目: \" + taxonomy.name + \"?\")\n  }\n\n  private buildSetting(setting: TaxonomySetting) {\n    if (!setting.visibility.showUi) {\n      return ;\n    }\n    this.settings = this.buildSettings();\n    this.source = new ServerDataSource(this.http, {\n      endPoint: TAXONOMIES.replace('{taxonomy}', this.taxonomy),\n      dataKey: 'records',\n      totalKey: 'total',\n      pagerPageKey: 'page',\n      pagerLimitKey: 'limit',\n      filterFieldKey: '#field#',\n    });\n    let elements: Control[] = [];\n    if (setting.labels['nameField']) {\n      elements.push({\n        label: setting.labels['nameField'], required: true, id: \"name\", type: 'input', description: setting.labels['nameFieldDescription'],\n      });\n    }\n    if (setting.labels['slugField']) {\n      elements.push({\n        label: setting.labels['slugField'], id: \"slug\", type: 'input', value: '', validators: [{key: \"pattern\", value: \"^[a-z0-9]+(?:-[a-z0-9]+)*$\"}], description: setting.labels['slugFieldDescription'],\n      });\n    }\n    if (setting.labels['parentField'] && setting.hierarchical) {\n      let options: ControlOption[] = [\n        {label: \"无\", value: ''},\n      ];\n      elements.push({\n        label: setting.labels['parentField'], id: \"parent\", required: false, type: \"select\", value: '', options: options, description: setting.labels['parentFieldDescription'],\n      });\n\n      this.source?.getAll().then((taxonomies: TermTaxonomy[]) => {\n        taxonomies.forEach(taxonomy => {\n          let name = taxonomy.name;\n          if (taxonomy.level != undefined && taxonomy.level > 0) {\n            name = '--'.repeat(taxonomy.level) + taxonomy.name;\n          }\n          options.push({label: name, value: taxonomy.id!})\n        })\n      });\n    }\n    if (setting.labels['descField']) {\n      elements.push({\n        label: setting.labels['descField'], id: \"desc\", type: 'textarea', value: '', description: setting.labels['descFieldDescription'], required: false,\n      });\n    }\n    this.formGroup = elements.length ? buildFormGroup(elements) : new FormGroup<any>({});\n    this.formGroup.addControl('id', new FormControl<number>(0));\n    this.formGroup.addControl('taxonomy', new FormControl<string>(this.taxonomy));\n    const metas = this.config.taxonomyMeta(this.taxonomy);\n    const metaControls: Control[] = [];\n    if (metas.length > 0) {\n      metas.forEach(item => {\n        if (item.showUi && item.isUpdated && item.control) {\n          metaControls.push(item.control);\n        }\n      });\n    }\n    this.formGroup.addControl('meta',\n      metaControls.length > 0 ? buildFormGroup(metaControls) : new FormGroup({})\n    );\n    this.metaControls = metaControls;\n    this.controls = elements;\n    this.taxonomySetting = setting;\n  }\n  get metaGroup() {\n    return this.formGroup?.controls['meta'] as FormGroup;\n  }\n\n\n  private buildSettings(): Settings {\n    return {\n      selectMode: 'multi',\n      actions: {\n        position: 'right',\n        add: false,\n        edit: false,\n        delete: false,\n        columnTitle: '操作',\n      },\n      pager: {\n        perPage: 30,\n      },\n      mode: 'external',\n      rowClassFunction: () => {\n        return 'text-break';\n      },\n      columns: {\n        name: {\n          title: '名称',\n          type: IColumnType.Custom,\n          filter: true,\n          renderComponent: TaxonomyActionsComponent,\n          onComponentInitFunction: (component: TaxonomyActionsComponent) => {\n            component.onClick().subscribe(item => {\n              switch (item.action) {\n                case 'delete':\n                  this.delete(item.taxonomy)\n                  break;\n                case 'convert':\n                  this.convertDialog(item.taxonomy);\n                  break;\n              }\n            });\n          },\n          isSortable: false\n        },\n        slug: {\n          title: '别名',\n          type: IColumnType.Text,\n          filter: false,\n          isSortable: false\n        },\n        description: {\n          title: '内容描述',\n          type: IColumnType.Text,\n          filter: false,\n          isSortable: false\n        },\n        count: {\n          title: '总数',\n          type: IColumnType.Text,\n          filter: false,\n        }\n      }\n    }\n  }\n\n  batch() {\n    const id = this.source?.getSelectedItems().map((item) => {\n      return item.id;\n    });\n    if (id === undefined || id.length < 1) {\n      return ;\n    }\n    switch (this.batchMode) {\n      case 'delete':\n        this.deleteTaxonomy(id, \"确认删除已选择的类目?\");\n        break;\n    }\n  }\n\n  private deleteTaxonomy(id: number[], message: string) {\n    if (window.confirm(message)) {\n      this.http.post(TAXONOMY_DELETE.replace('{taxonomy}', this.taxonomy), {sets: id}).subscribe(()=>{\n        this.source?.refresh();\n      });\n    }\n  }\n  private convertDialog(taxonomy: TermTaxonomy) {\n    this.dialog.open(ConvertDialogComponent, {\n      context: {\n        taxonomy: taxonomy,\n      },\n    }).onClose.subscribe(selectedTaxonomy => {\n      if (selectedTaxonomy !== undefined && selectedTaxonomy) {\n        this.convert(taxonomy.id!, selectedTaxonomy);\n      }\n    });\n  }\n\n  private convert(id: number, toTaxonomy: string) {\n    this.http.post(TAXONOMY_CONVERT, {id: id, toTaxonomy: toTaxonomy}).subscribe(() => {\n      this.source?.refresh();\n    });\n  }\n}\n\n\n@Component({\n  selector: 'app-taxonomy-edit',\n  template: `\n    <nb-card>\n      <nb-card-header>{{taxonomySetting ? taxonomySetting!.labels.editItem : ''}}</nb-card-header>\n      <nb-card-body>\n        <form *ngIf=\"formGroup\" (ngSubmit)=\"onSubmit($event)\" [formGroup]=\"formGroup!\">\n          <control-container direction=\"\" [controls]=\"controls\" [form]=\"formGroup!\"></control-container>\n          <control-container [controls]=\"metaControls\" [form]=\"metaGroup\"></control-container>\n          <div class=\"my-3  d-flex justify-content-between\">\n            <label class=\"label col-form-label\"></label>\n            <button\n              type=\"submit\"\n              status=\"primary\"\n              size=\"small\"\n              [disabled]=\"formGroup!.invalid || spinner\"\n              [nbSpinner]=\"spinner\"\n              nbButton>更新</button>\n          </div>\n        </form>\n      </nb-card-body>\n    </nb-card>\n  `,\n})\nexport class EditTaxonomyComponent implements OnInit, OnSpinner {\n  formGroup: FormGroup | undefined;\n  controls: Control[] = [];\n  spinner: boolean = false;\n  taxonomySetting: TaxonomySetting | undefined;\n  metaControls: Control[] = [];\n  constructor(protected http: HttpClient,\n              protected route: ActivatedRoute,\n              protected location: LocationStrategy,\n              protected config: ConfigurationService\n              ) {\n  }\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe(map => {\n      let id = parseInt(map.get('id') || '0', 10);\n      if (id < 1) {\n        this.location.back();\n        return ;\n      }\n      this.http.get<TermTaxonomy>(TAXONOMY_SHOW, {params: {id: id}}).subscribe(response => {\n        let taxonomies = this.config.taxonomies();\n        let taxonomySetting = taxonomies[response.taxonomy];\n        if (!taxonomySetting) {\n          this.location.back();\n          return ;\n        }\n        this.buildSetting(taxonomySetting, response);\n      }, error => {\n        this.location.back();\n      });\n    });\n  }\n\n  onSpinner(spinner: boolean): void {\n    this.spinner = spinner;\n  }\n\n  private buildSetting(setting: TaxonomySetting, termTaxonomy: TermTaxonomy) {\n    if (!setting.visibility.showUi) {\n      this.location.back();\n      return ;\n    }\n    let elements: Control[] = [];\n    if (setting.labels['nameField']) {\n      elements.push({\n        label: setting.labels['nameField'], required: true, value: termTaxonomy.name, id: \"name\", type: 'input', description: setting.labels['nameFieldDescription'],\n      });\n    }\n    if (setting.labels['slugField']) {\n      elements.push({\n        label: setting.labels['slugField'], id: \"slug\", type: 'input', value: termTaxonomy.slug, validators: [{key: \"pattern\", value: \"^[a-z0-9]+(?:-[a-z0-9]+)*$\"}], description: setting.labels['slugFieldDescription'],\n      });\n    }\n    if (setting.labels['parentField'] && setting.hierarchical) {\n      let options: ControlOption[] = [\n        {label: \"无\", value: ''},\n      ];\n      elements.push({\n        label: setting.labels['parentField'], id: \"parent\", required: false, type: \"select\", value: termTaxonomy.parent || '', options: options, description: setting.labels['parentFieldDescription'],\n      });\n      this.http.get<Records<TermTaxonomy>>(TAXONOMIES.replace('{taxonomy}', termTaxonomy.taxonomy)).subscribe(response => {\n        response.records.forEach(item => {\n          let name = item.name;\n          if (item.level != undefined && item.level > 0) {\n            name = '--'.repeat(item.level) + item.name;\n          }\n          options.push({label: name, value: item.id!})\n        });\n      });\n    }\n    if (setting.labels['descField']) {\n      elements.push({\n        label: setting.labels['descField'], id: \"desc\", type: 'textarea', value: termTaxonomy.description, description: setting.labels['descFieldDescription'], required: false,\n      });\n    }\n    this.formGroup = elements.length ? buildFormGroup(elements) : new FormGroup<any>({});\n    this.formGroup.addControl('id', new FormControl<number>(termTaxonomy.id!));\n    this.formGroup.addControl('taxonomy', new FormControl<string>(termTaxonomy.taxonomy));\n    const metas = this.config.taxonomyMeta(termTaxonomy.taxonomy);\n    const metaControls: Control[] = [];\n    if (metas.length > 0) {\n      metas.forEach(item => {\n        if (item.showUi && item.isUpdated && item.control) {\n          metaControls.push(item.control);\n        }\n      });\n    }\n    this.formGroup.addControl('meta',\n      metaControls.length > 0\n        ? buildFormGroup(metaControls, termTaxonomy.meta)\n        : new FormGroup({})\n    );\n    this.controls = elements;\n    this.metaControls = metaControls;\n    this.taxonomySetting = setting;\n  }\n\n  get metaGroup() {\n    return this.formGroup?.controls['meta'] as FormGroup;\n  }\n\n  onSubmit($event: Event) {\n    if (this.formGroup?.invalid) {\n      return ;\n    }\n    const data = this.formGroup?.getRawValue();\n    this.http.post<TermTaxonomy>(TAXONOMY_UPDATE.replace('{taxonomy}', data.taxonomy), data, {context:new HttpContext().set(SPINNER, this)}).subscribe(response => {\n      this.location.back();\n    });\n  }\n}\n\n\n@Component({\n  selector: 'app-taxonomy-actions',\n  template: `\n    <div class=\"py-3 text-break fs-6\">\n      {{value}}\n    </div>\n    <nb-actions>\n      <nb-action class=\"ps-0\" link=\"/app/taxonomy/{{rowData.taxonomy}}/{{rowData.id}}\" title=\"编辑\"\n                 icon=\"edit-2-outline\"></nb-action>\n      <nb-action (click)=\"delete()\" title=\"删除\" icon=\"trash-outline\"></nb-action>\n      <nb-action (click)=\"convert()\" title=\"迁移\" icon=\"swap-outline\"></nb-action>\n    </nb-actions>\n  `,\n  styles: [\n    `\n      :host {\n        nb-actions {\n          visibility: hidden;\n        }\n        &:hover {\n          nb-actions {\n            visibility: visible;\n          }\n        }\n      }\n    `\n  ]\n})\nexport class TaxonomyActionsComponent implements OnInit {\n\n  private actionClick: EventEmitter<{action:string, taxonomy: TermTaxonomy}> = new EventEmitter();\n\n  @Input() value!: string;\n  @Input() rowData!: TermTaxonomy;\n  ngOnInit(): void {\n    if (this.rowData.level != undefined && this.rowData.level > 0) {\n      this.value = \"--\".repeat(this.rowData.level) + this.value;\n    }\n  }\n\n  onClick() {\n    return this.actionClick;\n  }\n\n  delete() {\n    this.actionClick.next({action: 'delete', taxonomy: this.rowData});\n  }\n  convert() {\n    this.actionClick.next({action: 'convert', taxonomy: this.rowData});\n  }\n}\n\n@Component({\n  selector: 'app-taxonomy-convert-dialog',\n  template: `\n    <nb-card>\n      <nb-card-header>\n        <strong class=\"fw-bolder text-danger\" *ngIf=\"this.taxonomy\">{{this.taxonomy.name!}}</strong>--正在转换类别\n      </nb-card-header>\n      <nb-card-body>\n        <div class=\"mb-3 d-flex align-items-center\">\n          <label class=\"label col-form-label\">选择需要转换的类别: </label>\n          <div class=\"px-2\">\n            <nb-select fullWidth id=\"taxonomies\" [(ngModel)]=\"selectedTaxonomy\">\n              <nb-option *ngFor=\"let option of options\" [value]=\"option.value\">{{option.label}}</nb-option>\n            </nb-select>\n          </div>\n        </div>\n      </nb-card-body>\n      <nb-card-footer class=\"d-flex justify-content-between\">\n        <button nbButton status=\"basic\" (click)=\"dialogRef.close()\">取消</button>\n        <button nbButton status=\"primary\" [disabled]=\"selectedTaxonomy.length < 1\" (click)=\"convert()\">转换</button>\n      </nb-card-footer>\n    </nb-card>\n  `,\n})\nexport class ConvertDialogComponent implements OnInit{\n  taxonomy: TermTaxonomy | undefined;\n  options: any[] = [];\n  selectedTaxonomy = '';\n  constructor(public dialogRef: NbDialogRef<ConvertDialogComponent>, private config: ConfigurationService) {\n\n  }\n  ngOnInit(): void {\n    const taxonomySettings = this.config.taxonomies();\n    let options = [\n      {label: '--选择--', value: ''},\n    ];\n    for (let taxonomySettingsKey in taxonomySettings) {\n      let taxonomy = taxonomySettings[taxonomySettingsKey];\n      if (!taxonomy.visibility.showUi) {\n        continue;\n      }\n      if (taxonomy.slug == this.taxonomy?.taxonomy) {\n        continue;\n      }\n      options.push({\n        label: taxonomy.label,\n        value: taxonomy.slug,\n      });\n    }\n    this.options = options;\n  }\n  convert() {\n    this.dialogRef.close(this.selectedTaxonomy)\n  }\n}\n\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {ThemeModule} from \"../../@theme/theme.module\";\nimport {ControlModule} from \"../../shared/control/control.module\";\nimport {Angular2SmartTableModule} from \"angular2-smart-table\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {\n  ConvertDialogComponent,\n  EditTaxonomyComponent,\n  TaxonomyActionsComponent,\n  TaxonomyComponent\n} from \"./taxonomy.component\";\n\n\n\nlet routes: Routes = [\n  {\n    path: ':taxonomy',\n    component: TaxonomyComponent,\n  },\n  {\n    path: ':taxonomy/:id',\n    component: EditTaxonomyComponent,\n  }\n];\n\n@NgModule({\n  declarations: [\n    TaxonomyComponent,\n    EditTaxonomyComponent,\n    TaxonomyActionsComponent,\n    ConvertDialogComponent,\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    Angular2SmartTableModule,\n    ThemeModule,\n    ControlModule,\n  ]\n})\nexport class TaxonomyModule {\n}\n"],"x_google_ignoreList":[]}