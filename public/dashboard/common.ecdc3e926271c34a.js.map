{"version":3,"file":"common.ecdc3e926271c34a.js","mappings":"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","names":["CATEGORIES","TAXONOMIES","TAXONOMY_SHOW","TAXONOMY_STORE","TAXONOMY_UPDATE","TAXONOMY_DELETE","TAXONOMY_CONVERT","POSTS","POST_STATISTICS","POST_SHOW","POST_STORE","POST_UPDATE","POST_DELETE","POST_TRASH","POST_UNDO","USER_MEMBER","USER_CREATE_MEMBER","USER_UPDATE_MEMBER","USER_DELETE_MEMBER","USER_MEMBER_PROFILE","USER_SELF_PROFILE","USER_RESET_EMAIL","UploadService","constructor","http","upload","files","status","forEach","file","formData","FormData","append","name","req","HttpRequest","UPLOAD_FILE","responseType","reportProgress","progress","Subject","response","startTime","Date","getTime","this","request","subscribe","next","event","type","HttpEventType","percentDone","Math","round","loaded","total","HttpResponse","body","complete","error","asObservable","_angular_core__WEBPACK_IMPORTED_MODULE_3__","factory","i0","DialogComponent","dialogRef","uploadService","Set","ngOnInit","onFilesAdded","_a","nativeElement","errorMessage","key","isNaN","parseInt","console","log","nameArray","split","suffix","length","includes","toLowerCase","join","add","addFiles","click","closeDialog","uploadSuccessful","finish","emit","results","close","size","uploading","res","hasOwnProperty","messages","statusText","message","push","filename","allProgressObservables","primaryButtonText","canBeClosed","showCancelButton","forkJoin","end","remove","delete","core","selectors","decls","ctx","UploadComponent","dialog","EventEmitter","openUploadDialog","open","closeOnBackdropClick","closeOnEsc","componentRef","instance","multiple","UploadModule","imports","CommonModule","NbButtonModule","NbProgressBarModule","NbListModule","NbCardModule","NbIconModule"],"sourceRoot":"webpack:///","sources":["./dashboard/app/@core/definition/content/api.ts","./dashboard/app/@core/definition/user/api.ts","./dashboard/app/@core/services/upload.service.ts","./dashboard/app/shared/upload/dialog/dialog.component.html","./dashboard/app/shared/upload/dialog/dialog.component.ts","./dashboard/app/shared/upload/upload.component.ts","./dashboard/app/shared/upload/upload.component.html","./dashboard/app/shared/upload/upload.module.ts"],"sourcesContent":["export const TAGS: string = '/taxonomy/tag';\nexport const CATEGORIES: string = '/taxonomy/category';\n\nexport const TAXONOMIES: string = \"/taxonomy/{taxonomy}\";\nexport const TAXONOMY_SHOW: string = \"/taxonomy/{id}\";\nexport const TAXONOMY_REGISTERED: string = \"/taxonomy/registered\";\nexport const TAXONOMY_STORE: string = '/taxonomy/{taxonomy}/store';\nexport const TAXONOMY_UPDATE: string = '/taxonomy/{taxonomy}/{id}/update';\nexport const TAXONOMY_DELETE: string = '/taxonomy/{taxonomy}/delete';\nexport const TAXONOMY_CONVERT: string = '/taxonomy/{id}/convert';\n\n\nexport const POSTS: string = '/post';\nexport const POST_STATISTICS: string = '/post/statistics';\nexport const POST_TYPE_SETTING: string = '/post/type/{type}';\nexport const POST_SHOW: string = '/post/{id}';\nexport const POST_STORE: string = '/post/store';\nexport const POST_UPDATE: string = '/post/{id}/update';\nexport const POST_DELETE: string = '/post/delete';\nexport const POST_TRASH: string = '/post/trash';\nexport const POST_UNDO: string = '/post/undo';\n\n","export const USER_MEMBER: string = '/user';\nexport const USER_CREATE_MEMBER: string = '/user/store';\nexport const USER_UPDATE_MEMBER: string = '/user/{id}/update';\nexport const USER_DELETE_MEMBER: string = '/user/delete';\nexport const USER_MEMBER_PROFILE: string = '/user/{id}';\nexport const USER_SELF_PROFILE: string = '/user/profile';\nexport const USER_RESET_EMAIL: string = '/user/reset/email';\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpRequest, HttpResponse, HttpEventType} from '@angular/common/http';\nimport {Observable, Subject} from 'rxjs';\nimport {UPLOAD_FILE} from \"../definition/open/api\";\n\n@Injectable()\nexport class UploadService {\n\n  constructor(private http: HttpClient) {\n\n  }\n\n  // file from event.target.files[0]\n  upload(files: Set<File>): { [p: string]: { progress: Observable<number>, response: Observable<any> } } {\n\n    const status: { [key: string]: { progress: Observable<number>, response: Observable<any> } } = {};\n\n    files.forEach(file => {\n      // create a new multipart-form for every file\n      const formData: FormData = new FormData();\n      formData.append('file', file, file.name);\n\n      // create a http-post request and pass the form\n      // tell it to report the upload progress\n      const req = new HttpRequest('POST', UPLOAD_FILE, formData, {\n        responseType: 'json',\n        reportProgress: true\n      });\n\n      // create a new progress-subject for every file\n      const progress = new Subject<number>();\n      const response = new Subject<any>();\n\n      // send the http-request and subscribe for progress-updates\n\n      const startTime = new Date().getTime();\n      this.http.request(req).subscribe(\n      {\n          next(event) {\n            if (event.type === HttpEventType.UploadProgress) {\n              // calculate the progress percentage\n              const percentDone = Math.round((100 * event.loaded) / event.total!);\n              // pass the percentage into the progress-stream\n              progress.next(percentDone);\n            } else if (event instanceof HttpResponse) {\n              // Close the progress-stream if we get an answer form the API\n              // The upload is complete\n              response.next(event.body);\n              progress.complete();\n            }\n          },\n          error(error) {\n            response.next(error);\n            progress.complete();\n          }\n        }\n      );\n      // Save every progress-observable in a map of all observables\n      status[file.name] = {\n        response: response,\n        progress: progress.asObservable()\n      };\n    });\n\n    // return the map of progress.observables\n    return status;\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-12\">\n    <input type=\"file\" #file style=\"display: none\"  (change)=\"onFilesAdded()\" [multiple]=\"multiple\"/>\n    <nb-card class=\"list-card\">\n      <nb-card-header class=\"d-flex justify-content-between align-items-center\">\n        <span>上传文件</span>\n        <button [disabled]=\"uploading || uploadSuccessful\" nbButton status=\"primary\" (click)=\"addFiles()\">添加文件</button>\n      </nb-card-header>\n      <nb-card-body>\n        <nb-list>\n          <nb-list-item *ngFor=\"let file of files;\">\n            <div class=\"row flex-grow-1 flex-nowrap\">\n              <div class=\"col-1\">\n                <nb-icon status=\"primary\" icon=\"file\"></nb-icon>\n              </div>\n              <div class=\"col-5\">\n                {{file.name}}\n              </div>\n              <div class=\"col-5\">\n                <nb-progress-bar\n                  *ngIf=\"progress\"\n                  [status]=\"messages[file.name] ? 'danger' : 'success'\"\n                  [displayValue]=\"!messages[file.name]\"\n                  [value]=\"progress[file.name].progress | async\">\n                  {{messages[file.name]}}\n                </nb-progress-bar>\n              </div>\n              <div class=\"col-1\" *ngIf=\"!uploading && !uploadSuccessful\">\n                <nb-icon style=\"cursor: pointer\" (click)=\"remove(file)\" icon=\"close\" status=\"danger\"></nb-icon>\n              </div>\n            </div>\n          </nb-list-item>\n        </nb-list>\n      </nb-card-body>\n      <nb-card-footer class=\"actions\">\n        <div class=\"row\">\n          <div class=\"col-12 text-danger py-2\" *ngIf=\"errorMessage.length > 0\">\n            {{ errorMessage }}\n          </div>\n          <div class=\"col-12 d-flex justify-content-between\">\n            <button *ngIf=\"showCancelButton\" nbButton status=\"control\" (click)=\"dialogRef.close();\" class=\"mr-2\">取消</button>\n            <button nbButton status=\"primary\" [disabled]=\"!canBeClosed || files.size < 1\" (click)=\"closeDialog()\">{{primaryButtonText}}</button>\n          </div>\n        </div>\n      </nb-card-footer>\n    </nb-card>\n  </div>\n</div>\n","import {Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\nimport {forkJoin, Observable} from 'rxjs';\nimport {UploadService} from '../../../@core/services/upload.service';\nimport {NbDialogRef} from '@nebular/theme';\n\n@Component({\n  selector: 'app-dialog',\n  templateUrl: './dialog.component.html',\n  providers: [\n    UploadService,\n  ],\n  styles: [\n    `\n    nb-card {\n      min-width: 290px;\n    }\n    .list-card {\n      nb-card-header {\n        border-bottom: none;\n      }\n      nb-card-footer {\n        border-top: none;\n      }\n      nb-card-body {\n        padding: 0;\n      }\n    }\n    `\n  ]\n})\nexport class DialogComponent implements OnInit {\n\n  constructor(public dialogRef: NbDialogRef<DialogComponent>,\n              private uploadService: UploadService) {\n\n  }\n  @ViewChild('file', { static: false }) file: ElementRef | undefined;\n\n  public files: Set<File> = new Set();\n\n  @Input() multiple: boolean = false;\n  @Input() suffix: string[] = [];\n\n  @Output() finish: EventEmitter<string[]> | undefined;\n\n  progress!: {[key: string]: { progress: Observable<any>, response: Observable<any> }};\n  canBeClosed = true;\n  primaryButtonText = '上传';\n  showCancelButton = true;\n  uploading = false;\n  uploadSuccessful = false;\n  messages: {[key: string]: string} = {};\n  errorMessage = '';\n\n  results: any[] = [];\n\n  ngOnInit() {}\n\n  onFilesAdded() {\n    const files: { [key: string]: File } = this.file?.nativeElement.files;\n    let errorMessage = '';\n    for (const key in files) {\n      if (isNaN(parseInt(key, 10))) {\n        continue;\n      }\n      let file = files[key];\n      console.log(file)\n      let nameArray = file.name.split('.');\n      let suffix = nameArray[nameArray.length - 1];\n      if (this.suffix.length > 0 && !this.suffix.includes(suffix.toLowerCase())) {\n        errorMessage = '此文件类型不支持，只支持: ' + this.suffix.join(',') + '文件格式';\n        continue;\n      }\n      this.files.add(file);\n    }\n    this.errorMessage = errorMessage;\n  }\n\n  addFiles() {\n    this.file?.nativeElement.click();\n  }\n\n  closeDialog() {\n    // if everything was uploaded already, just close the dialog\n    if (this.uploadSuccessful) {\n      this.finish?.emit(this.results);\n      return this.dialogRef.close();\n    }\n    if (this.files.size < 1) {\n      this.errorMessage = '选择需要上传的文件!';\n      return ;\n    }\n\n    // set the component state to \"uploading\"\n    this.uploading = true;\n\n    // start the upload and save the progress map\n    this.progress = this.uploadService.upload(this.files);\n    for (const key in this.progress) {\n      this.progress[key].progress.subscribe((res: any)=> console.log(res));\n      this.progress[key].response.subscribe((res: any) => {\n        if (res.hasOwnProperty('statusText')) {\n          this.messages[key] = res.statusText;\n        } else if (res.hasOwnProperty('status') && res.status != 'ok') {\n          this.messages[key] = res.message;\n        } else {\n          this.results.push(res.filename);\n        }\n      });\n    }\n\n    // convert the progress map into an array\n    const allProgressObservables = [];\n    for (const key in this.progress) {\n      allProgressObservables.push(this.progress[key].progress);\n    }\n\n    // Adjust the state variables\n\n    // The OK-button should have the text \"Finish\" now\n    this.primaryButtonText = '完成';\n\n    // The dialog should not be closed while uploading\n    this.canBeClosed = false;\n    // this.dialogRef.disableClose = true;\n\n    // Hide the cancel-button\n    this.showCancelButton = false;\n\n    // When all progress-observables are completed...\n    forkJoin(allProgressObservables).subscribe(end => {\n      // ... the dialog can be closed again...\n      this.canBeClosed = true;\n      // this.dialogRef.disableClose = false;\n\n      // ... the upload was successful...\n      this.uploadSuccessful = true;\n\n      // ... and the component is no longer uploading\n      this.uploading = false;\n    });\n  }\n\n  remove(file: File) {\n    this.files.delete(file);\n  }\n}\n","import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\nimport {DialogComponent} from './dialog/dialog.component';\nimport {NbDialogService} from '@nebular/theme';\nimport {NbComponentStatus} from \"@nebular/theme/components/component-status\";\n\n@Component({\n  selector: 'app-upload',\n  templateUrl: './upload.component.html',\n  styles: [\n    `:host {display: block}`\n  ]\n})\nexport class UploadComponent {\n\n  @Input() multiple = false;\n  @Input() text = '上传';\n  @Input() status: NbComponentStatus = 'primary';\n  @Input() suffix: string[] = [];\n\n  @Output() finish: EventEmitter<string[]> = new EventEmitter();\n\n  constructor(private dialog: NbDialogService) { }\n\n  openUploadDialog() {\n    const dialogRef = this.dialog.open(DialogComponent, {\n      closeOnBackdropClick: false,\n      closeOnEsc: false,\n    });\n    dialogRef.componentRef.instance.multiple = this.multiple;\n    dialogRef.componentRef.instance.finish = this.finish;\n    dialogRef.componentRef.instance.suffix = this.suffix;\n  }\n}\n","<button (click)=\"openUploadDialog()\" type=\"button\" nbButton [status]=\"status\">{{ text }}</button>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {UploadComponent} from './upload.component';\nimport {DialogComponent} from './dialog/dialog.component';\nimport {NbButtonModule, NbCardModule, NbIconModule, NbListModule, NbProgressBarModule} from '@nebular/theme';\nimport {UploadService} from '../../@core/services/upload.service';\n\n\n\n@NgModule({\n  declarations: [UploadComponent, DialogComponent],\n  exports: [\n    UploadComponent\n  ],\n  imports: [\n    CommonModule,\n    NbButtonModule,\n    NbProgressBarModule,\n    NbListModule,\n    NbCardModule,\n    NbIconModule\n  ],\n  providers: [\n    UploadService\n  ]\n})\nexport class UploadModule { }\n"],"x_google_ignoreList":[]}