{"version":3,"file":"727.e8213fece3e3ef66.js","mappings":"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","names":["i0","CommentComponent","constructor","http","activatedRoute","configService","this","FormControl","label","value","route","snapshot","ngOnInit","settings","buildSettings","loadStatistics","loadSource","radioFilter","valueChanges","subscribe","get","data","radios","all","my","unapproved","approved","spam","trash","filter","source","ServerDataSource","endPoint","dataKey","totalKey","pagerPageKey","pagerLimitKey","filterFieldKey","edit","$event","batch","batchMode","idSets","getSelectedItems","forEach","item","push","id","length","updateStatus","action","post","context","HttpContext","set","SPINNER","selectMode","actions","position","add","delete","columnTitle","pager","perPage","mode","columns","author","title","type","IColumnType","classContent","valuePrepareFunction","params","join","content","renderComponent","CommentContentComponent","onComponentInitFunction","component","onClick","createdAt","onSpinner","spinner","core","selectors","ctx","EventEmitter","actionClick","click","emit","rowData","icon","CommentEditComponent","location","paramMap","parseInt","comment","options","back","onSubmit","console","log","invalid","valid","getStatus","_a","find","CommentModule","CommonModule","RouterModule","path","pathMatch","ThemeModule","Angular2SmartTableModule"],"sourceRoot":"webpack:///","sources":["./dashboard/app/pages/comment/comment.component.html","./dashboard/app/pages/comment/comment.component.ts","./dashboard/app/pages/comment/comment.module.ts"],"sourcesContent":["<nb-card>\n  <nb-card-header>{{route.title}}</nb-card-header>\n  <nb-card-body>\n    <nb-radio-group [formControl]=\"radioFilter\" class=\"d-flex flex-row mb-2\">\n      <nb-radio *ngFor=\"let radio of radios\" [value]=\"radio.value\">{{radio.label}}</nb-radio>\n    </nb-radio-group>\n    <form (ngSubmit)=\"batch()\" class=\"row mb-2\">\n      <nb-select name=\"batchMode\" [(ngModel)]=\"batchMode\">\n        <nb-option [value]=\"option.value\" *ngFor=\"let option of batches\">{{option.label}}</nb-option>\n      </nb-select>\n      <div class=\"col\">\n        <button nbButton status=\"primary\" [disabled]=\"!batchMode || spinner\" [nbSpinner]=\"spinner\" type=\"submit\">应用</button>\n      </div>\n    </form>\n    <angular2-smart-table\n      [settings]=\"settings\"\n      [source]=\"source\"\n      (edit)=\"edit($event)\"\n    >\n    </angular2-smart-table>\n\n  </nb-card-body>\n</nb-card>\n","import {Component, EventEmitter, HostListener, Input, OnInit} from '@angular/core';\nimport {HttpClient, HttpContext} from \"@angular/common/http\";\nimport {EditEvent} from \"angular2-smart-table/lib/lib/events\";\nimport {IColumnType, ServerDataSource} from \"angular2-smart-table\";\nimport {Settings} from \"angular2-smart-table/lib/lib/settings\";\nimport {FormControl, NgForm} from \"@angular/forms\";\nimport {ActivatedRoute, ActivatedRouteSnapshot} from \"@angular/router\";\nimport {LocationStrategy} from \"@angular/common\";\nimport {ConfigurationService} from \"../../@core/services/configuration.service\";\nimport {OnSpinner} from \"../../@core/definition/common\";\nimport {SPINNER} from \"../../@core/interceptor/authorization\";\n\n@Component({\n  selector: 'app-comment',\n  templateUrl: './comment.component.html',\n  styleUrls: ['./comment.component.scss']\n})\nexport class CommentComponent implements OnInit, OnSpinner {\n  source!: ServerDataSource;\n  radioFilter = new FormControl('all');\n  radios: {label: string, value: string}[] = [];\n\n  settings: Settings = {};\n  batches = [\n    {'label': '批量操作', 'value': ''},\n    {'label': '驳回', 'value': 'unapproved'},\n    {'label': '批准', 'value': 'approved'},\n    {'label': '标记为垃圾', 'value': 'spam'},\n    {'label': '移至回收站', 'value': 'trash'},\n  ];\n  batchMode: string = '';\n\n  route: ActivatedRouteSnapshot;\n  spinner: boolean = false;\n\n  constructor(private http: HttpClient,\n              protected activatedRoute: ActivatedRoute,\n              protected configService: ConfigurationService) {\n\n    this.route = activatedRoute.snapshot;\n  }\n  ngOnInit(): void {\n    this.settings = this.buildSettings();\n    this.loadStatistics();\n    this.loadSource('all');\n    this.radioFilter.valueChanges.subscribe(value => {\n      this.loadSource(value!);\n    });\n  }\n\n  private loadStatistics() {\n    this.http.get<Record<string, number>>('/comment/statistics').subscribe((data: Record<string, number>) => {\n      this.radios = [\n        {label: `全部 (${data.all})`, value: 'all'},\n        {label: `我的 (${data.my})`, value: 'my'},\n        {label: `待审 (${data.unapproved})`, value: 'unapproved'},\n        {label: `已批准 (${data.approved})`, value: 'approved'},\n        {label: `垃圾 (${data.spam})`, value: 'spam'},\n        {label: `回收站 (${data.trash})`, value: 'trash'},\n      ];\n    });\n  }\n\n  private loadSource(filter: string) {\n    this.source = new ServerDataSource(this.http, {\n      endPoint: '/comment?statusFilter='+filter,\n      dataKey: 'records',\n      totalKey: 'total',\n      pagerPageKey: 'page',\n      pagerLimitKey: 'limit',\n      filterFieldKey: '#field#',\n    });\n  }\n\n  edit($event: EditEvent) {\n\n  }\n\n  batch() {\n    if (this.batchMode == '') {\n      return ;\n    }\n    const idSets: number[] = [];\n    this.source.getSelectedItems().forEach(item => {\n      idSets.push(item.id);\n    })\n    if (idSets.length < 1) {\n      return ;\n    }\n    this.updateStatus(this.batchMode, idSets)\n  }\n\n  private updateStatus(action: string, idSets: number[]) {\n    this.http.post('/comment/' + action, {'id':idSets,}, {context:new HttpContext().set(SPINNER, this)}).subscribe(() => {\n      this.loadStatistics();\n      this.loadSource(this.radioFilter.value!);\n    });\n  }\n\n  private buildSettings(): Settings {\n    return  {\n      selectMode: 'multi',\n      actions: {\n        position: 'right',\n        add: false,\n        edit: false,\n        delete: false,\n        columnTitle: '操作',\n      },\n      pager: {\n        perPage: 30,\n      },\n      mode: 'external',\n      columns: {\n        author: {\n          title: \"作者\",\n          type: IColumnType.Html,\n          classContent: 'd-flex flex-column',\n          valuePrepareFunction: function (params: string[]) {\n            return params.join(\"\");\n          },\n          filter: false,\n        },\n        content: {\n          title: \"评论\",\n          filter: true,\n          type: IColumnType.Custom,\n          renderComponent: CommentContentComponent,\n          onComponentInitFunction: (component: CommentContentComponent) => {\n            component.onClick().subscribe(data => {\n              this.updateStatus(data.action, [data.id]);\n            });\n          }\n        },\n        post: {\n          title: \"回复至\",\n          type: IColumnType.Html,\n          classContent: 'd-flex flex-column',\n          valuePrepareFunction: function (params: string[]) {\n            return params.join(\"\");\n          },\n          filter: false,\n        },\n        createdAt: {\n          title: \"评论于\",\n          filter: false,\n        }\n      }\n    };\n\n  }\n\n  onSpinner(spinner: boolean): void {\n    this.spinner = spinner;\n  }\n}\n\n@Component({\n  selector: 'app-comment-actions',\n  template: `\n    <div class=\"py-3\">{{value}}</div>\n    <nb-actions>\n      <nb-action [class.ps-0]=\"i==0\" [link]=\"action.value == 'edit'?'/app/comment/'+rowData.id:''\" [title]=\"action.title\"\n                 (click)=\"click(action.value)\"\n                 [icon]=\"action.icon\"\n                 *ngFor=\"let action of actions; index as i\"></nb-action>\n    </nb-actions>\n  `,\n  styles: [\n    `\n      :host {\n        nb-actions {\n          visibility: hidden;\n        }\n        &:hover {\n          nb-actions {\n            visibility: visible;\n          }\n        }\n      }\n    `\n  ]\n})\nexport class CommentContentComponent implements OnInit {\n\n  private actionClick: EventEmitter<{action:string, id: number}> = new EventEmitter();\n\n  @Input() value!: string;\n  @Input() rowData: any;\n\n  actions: {title: string, icon: string, value: string}[] = [];\n\n  constructor(protected http: HttpClient) {\n  }\n\n  onClick() {\n    return this.actionClick;\n  }\n\n  click(action: string) {\n    if (action === 'edit') {\n      return false;\n    }\n    this.actionClick.emit({\n      action: action,\n      id: this.rowData.id\n    })\n    return false;\n  }\n\n  ngOnInit(): void {\n    const approved = this.rowData.approved;\n    const actions:{title: string, icon: string, value: string}[] = [];\n    switch (approved) {\n      case \"approved\":\n        actions.push(\n          {title: '驳回', icon: 'slash-outline', value: 'unapproved'},\n          {title: '编辑', icon: 'edit-2-outline', value: 'edit'},\n          {title: '标记为垃圾', icon: 'bookmark-outline', value: 'spam'},\n          {title: '移至回收站', icon: 'trash-2-outline', value: 'trash'},\n        );\n        break;\n      case \"unapproved\":\n        actions.push(\n          {title: '批准', icon: 'checkmark-circle-outline', value: 'approved'},\n          {title: '编辑', icon: 'edit-2-outline', value: 'edit'},\n          {title: '标记为垃圾', icon: 'bookmark-outline', value: 'spam'},\n          {title: '移至回收站', icon: 'trash-2-outline', value: 'trash'},\n        );\n        break;\n      case \"spam\":\n        actions.push(\n          {title: '不是垃圾评论', icon: 'undo-outline', value: 'unapproved'},\n          {title: '永久删除', icon: 'trash-outline', value: 'delete'},\n        );\n        break;\n      case \"trash\":\n        actions.push(\n          {title: '标记为垃圾', icon: 'bookmark-outline', value: 'spam'},\n          {title: '还原', icon: 'undo-outline', value: 'unapproved'},\n          {title: '永久删除', icon: 'trash-outline', value: 'delete'},\n        );\n        break;\n    }\n    this.actions = actions;\n  }\n}\n\n@Component({\n  selector: 'app-comment-edit',\n  template: `\n    <form class=\"row\" #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\">\n      <div class=\"col-9\">\n        <nb-card>\n          <nb-card-body>\n            <div class=\"mb-3\">\n              <label class=\"label form-label\">作者显示名称:</label>\n              <input nbInput fullWidth name=\"author\" [(ngModel)]=\"comment.author\" status=\"primary\" />\n            </div>\n            <div class=\"mb-3\">\n              <label class=\"label form-label\">作者电子邮箱地址:</label>\n              <input nbInput fullWidth name=\"email\" type=\"email\" [(ngModel)]=\"comment.email\" status=\"primary\" />\n            </div>\n            <div class=\"mb-3\">\n              <label class=\"label form-label\">作者URL:</label>\n              <input nbInput fullWidth name=\"url\" type=\"url\" [(ngModel)]=\"comment.url\" status=\"primary\" />\n            </div>\n            <div class=\"mb-3\">\n              <label class=\"label form-label\">评论:</label>\n              <textarea nbInput fullWidth name=\"content\" [(ngModel)]=\"comment.content\" rows=\"5\" status=\"primary\"></textarea>\n            </div>\n          </nb-card-body>\n        </nb-card>\n      </div>\n      <div class=\"col-3\">\n        <nb-card>\n          <nb-card-header>保存</nb-card-header>\n          <nb-card-body>\n            <div class=\"d-flex align-items-center\">\n              <label class=\"label form-label\">状态: </label>\n              <h6 class=\"ms-2\">{{getStatus(comment.approved)}}</h6>\n            </div>\n            <nb-radio-group name=\"approved\" [(ngModel)]=\"comment.approved\">\n              <nb-radio [value]=\"radio.value\" *ngFor=\"let radio of options\">{{radio.label}}</nb-radio>\n            </nb-radio-group>\n            <div class=\"d-flex align-items-center\">\n              <label class=\"label\">提交于: </label>\n              <div class=\"ms-2\">{{comment.createdAt}}</div>\n            </div>\n            <div class=\"d-flex align-items-center\" *ngIf=\"comment.post\">\n              <label class=\"label\">回应给: </label>\n              <h6 class=\"ms-2\"><a href=\"#/app/content/edit-post/{{comment.post.id}}\">{{comment.post.title}}</a></h6>\n            </div>\n          </nb-card-body>\n          <nb-card-footer class=\"d-flex justify-content-between\">\n            <a href=\"#\">移至回收站</a>\n            <button nbButton status=\"primary\" [disabled]=\"f.invalid\" size=\"small\" type=\"submit\">更新</button>\n          </nb-card-footer>\n        </nb-card>\n      </div>\n    </form>\n  `,\n})\nexport class CommentEditComponent implements OnInit {\n  comment: any = {};\n\n  options: {label: string, value: string}[] = [];\n\n  constructor(protected http: HttpClient, protected route: ActivatedRoute, protected location: LocationStrategy) {\n  }\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe(params => {\n      let id = parseInt(params.get('id')!, 10);\n      if (id > 0) {\n        this.http.get('/comment/' + id).subscribe(comment => {\n          this.comment = comment;\n          this.options = [\n            {'label': '批准', 'value': 'approved'},\n            {'label': this.comment.approved === 'unapproved' ? '待审' : '驳回', 'value': 'unapproved'},\n            {'label': '标记为垃圾', 'value': 'spam'},\n          ];\n          if (this.comment.approved == 'spam' || this.comment.approved == 'trash') {\n            this.location.back();\n          }\n        });\n      }\n    })\n  }\n\n\n  onSubmit($event: NgForm) {\n    console.log($event.invalid, $event.valid)\n    if ($event.invalid) {\n      return ;\n    }\n    if (this.comment.id) {\n      this.http.post('/comment/{id}/update', this.comment).subscribe(() => {\n        this.location.back();\n      });\n    }\n  }\n\n  getStatus(approved: string) {\n    return this.options.find(item => item.value == approved)?.label;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {CommentContentComponent, CommentComponent, CommentEditComponent} from './comment.component';\nimport {RouterModule} from \"@angular/router\";\nimport {ThemeModule} from \"../../@theme/theme.module\";\nimport {Angular2SmartTableModule} from \"angular2-smart-table\";\n\n\n\n@NgModule({\n  declarations: [\n    CommentComponent, CommentContentComponent, CommentEditComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: CommentComponent,\n        pathMatch: \"full\"\n      },\n      {\n        path: ':id',\n        title: '编辑评论',\n        component: CommentEditComponent,\n      }\n    ]),\n    ThemeModule,\n    Angular2SmartTableModule,\n  ]\n})\nexport class CommentModule { }\n"],"x_google_ignoreList":[]}