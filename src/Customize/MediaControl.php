<?php

namespace OctopusPress\Bundle\Customize;

use OctopusPress\Bundle\Repository\PostRepository;
use Psr\Container\ContainerExceptionInterface;
use Psr\Container\NotFoundExceptionInterface;

class MediaControl extends Control
{
    public function __construct(string $id, array $args = [])
    {
        if (!isset($args['type'])) {
            $args['type'] = self::FILE;
        }
        parent::__construct($id, $args);
    }

    /**
     * @param bool $isUpload
     * @return $this
     */
    public function isUpload(bool $isUpload): static
    {
        $this->setSetting('is_upload', $isUpload);
        return $this;
    }

    /**
     * @param string $select
     * @param string $remove
     * @param string $change
     * @return $this
     */
    public function buttonLabels(string $select, string $remove, string $change): static
    {
        $this->setSetting('button_labels', [
            'select' => $select,
            'remove' => $remove,
            'change' => $change,
        ]);
        return $this;
    }

    /**
     * @return array
     */
    public function jsonSerialize(): array
    {
        if (!$this->hasSetting('is_upload')) {
            $this->setSetting('is_upload', true);
        }
        if (!$this->hasSetting('button_labels')) {
            $this->setSetting('button_labels', $this->getDefaultButtonBabels());
        }
        $json = parent::jsonSerialize(); // TODO: Change the autogenerated stub
        if (($value = $json['value']) && ($attachmentId = is_array($value) ? array_map('intval', $value) : (int) $value)) {
            $json['attachment'] = $this->getAttachment($attachmentId);
        }
        return $json;
    }

    /**
     * @param int[]|int $id
     * @return array<string|int, mixed>
     */
    public function getAttachment(array|int $id): array
    {
        $assetsUrl = $this->getManager()->getBridger()->getAssetsUrl();
        $repository = $this->getManager()->getBridger()
                ->get(PostRepository::class);
        if (is_numeric($id)) {
            return $repository->find($id)?->getAttachment($assetsUrl);
        } else {
            $posts = $repository->findBy(['id' => $id]);
            $attachments = $mapAttachments = [];
            foreach ($posts as $post) {
                $mapAttachments[$post->getId()]  = $post->getAttachment($assetsUrl);
            }
            foreach ($id as $item) {
                if (isset($mapAttachments[$item])) {
                    $attachments[] = $mapAttachments[$item];
                }
            }
            return $attachments;
        }
    }

    /**
     * @return string[]
     */
    private function getDefaultButtonBabels(): array
    {
        return match ($this->getType()) {
            self::VIDEO => [
                'select' => '选择视频',
                'remove' => '移除视频',
                'change' => '更改视频',
            ],
            self::AUDIO => [
                'select' => '选择声音',
                'remove' => '移除声音',
                'change' => '更改声音',
            ],
            self::IMAGE => [
                'select' => '选择图像',
                'remove' => '移除图像',
                'change' => '更改图像',
            ],
            default => [
                'select' => '选择文件',
                'remove' => '移除文件',
                'change' => '更改文件',
            ],
        };
    }
}
